#include <QtGui>
#include <ctime>
#include "rasterwindow.h"

//! [5]

struct dout{
    int x=0;
    int y=0;
};//记录坐标

class AnalogClockWindow : public RasterWindow
{
public:
    AnalogClockWindow();
    void keyPressEvent(QKeyEvent *event) override;
    void get(int &x,int &y);//得到随机坐标，如食物等
    void start();//初始化
    void move();//移动
protected:
    void timerEvent(QTimerEvent *) override;
    void render(QPainter *p) override;

private:
    int m_timerId,AI_timerId,s_timerId,f_timerId,mf_timerId;
    bool iff=false,ifs=false;//当前速度，快或慢
    bool ate1=false,ate=false;//是否吃到了食物
    int xhead=0,yhead=0;
    int xhead1=990,yhead1=490;//蛇头
    int xa=10,ya=10,xb=20,yb=20;//a为加速，b为减速
    int W=1000,H=500;
    int xd=0,yd=0;
    int xd1=0,yd1=0;//方向
    dout snake[5005];
    dout snake1[5005];
    int length=1;
    int length1=1;
    int xfood=rand()%(W/10)*10;
    int yfood=rand()%(H/10)*10;
    bool flag=true;//判断死没死
    bool isStart=true;//目录界面
    int choice=1;//for different model: 1-classic 2-food 3-two snakes 4-obstacle 5-AI 6-through

    dout obstable[100];

};

void AnalogClockWindow::keyPressEvent(QKeyEvent *event)
{
    if(event->key()==Qt::Key_Left&&xd!=1) {xd=-1;yd=0;}
    if(event->key()==Qt::Key_Right&&xd!=-1) {xd=1;yd=0;}
    if(event->key()==Qt::Key_Up&&yd!=1) {xd=0;yd=-1;}
    if(event->key()==Qt::Key_Down&&yd!=-1) {xd=0;yd=1;}
    if(event->key()==Qt::Key_A&&xd1!=1) {xd1=-1;yd1=0;}
    if(event->key()==Qt::Key_D&&xd1!=-1) {xd1=1;yd1=0;}
    if(event->key()==Qt::Key_W&&yd1!=1) {xd1=0;yd1=-1;}
    if(event->key()==Qt::Key_S&&yd1!=-1) {xd1=0;yd1=1;}//方向
    //if(event->key()==Qt::Key_Q&&!flag) {start();}
    if(event->key()==Qt::Key_1&&isStart) {isStart=false;choice=1;}
    if(event->key()==Qt::Key_2&&isStart) {isStart=false;choice=2;}
    if(event->key()==Qt::Key_3&&isStart) {isStart=false;choice=3;}
    if(event->key()==Qt::Key_4&&isStart) {isStart=false;choice=4;}
    if(event->key()==Qt::Key_5&&isStart) {isStart=false;choice=5;}
    if(event->key()==Qt::Key_6&&isStart) {isStart=false;choice=6;}

}
//! [5]
void AnalogClockWindow::move(){


            if(flag)
            {

                if(!ate)
                {
                    xhead+=xd*10;
                    yhead+=yd*10;

                for(int i=length-1;i>0;i--)
                {snake[i].x=snake[i-1].x;
                snake[i].y=snake[i-1].y;}
                snake[0].x=xhead;
                snake[0].y=yhead;
                }
                if(choice==3&&!ate1)
                {
                    xhead1+=xd1*10;
                    yhead1+=yd1*10;

                    for(int i=length1-1;i>0;i--)
                    {snake1[i].x=snake1[i-1].x;
                    snake1[i].y=snake1[i-1].y;}
                    snake1[0].x=xhead1;
                    snake1[0].y=yhead1;
                }
            }
            ate1=false;ate=false;
}//没有吃到食物时逐个移动，吃到食物则直接将食物作为新的蛇头
void AnalogClockWindow::start()
{

    xhead=yhead=xd=yd=0;
    snake[0].x=xhead;
    snake[0].y=yhead;
    length=1;
    xfood=rand()%(W/10)*10;
    yfood=rand()%(H/10)*10;//初始化蛇
    flag=true;
    isStart=true;

    //if(choice==2)
    get(xa,ya);get(xb,yb);//特殊食物

   // else if(choice==3)

        xd1=yd1=0;
        xhead1=990;yhead1=490;
        snake1[0].x=xhead1;
        snake1[0].y=yhead1;
        length1=1;//初始化蛇1


    //else if(choice==4)

       for(int i=1;i<=20;i++)
    {
        obstable[i].x=200;
        obstable[i].y=(i-1)*10;
    }
    for(int i=1;i<=40;i++)
    {
        obstable[i+20].y=400;
        obstable[i+20].x=1010-i*10;
    }
    for(int i=1;i<=20;i++)
    {
        obstable[i+40].x=800;
        obstable[i+40].y=(i-1)*10;
    }
    for(int i=1;i<=15;i++)
    {
        obstable[i+60].y=150;
        obstable[i+60].x=800-(i-1)*10;
    }
    for(int i=76;i<=80;i++)
    {
        obstable[i].x=rand()%(W/10)*10;
        obstable[i].y=rand()%(H/10)*10;
    }//得到障碍

}

void AnalogClockWindow::get(int &targetx,int &targety)
{
    int x=rand()%(W/10)*10,y=rand()%(H/10)*10;
    bool flag1=true;
    for(int i=0;i<length;i++)
    {
        if(snake[i].x==x&&snake[i].y==y)
           { flag1=false;break;}

    }
    for(int i=0;i<length1;i++)
    {
        if(snake1[i].x==x&&snake1[i].y==y)
           { flag1=false;break;}

    }
    //防止食物出现在蛇身上
    if(flag1) {targetx=x;targety=y;}
    else get(targetx,targety);
}

//! [6]
AnalogClockWindow::AnalogClockWindow()
{
    setTitle("Snake 1.0");
    resize(W, H);
    srand(time(NULL));
    start();

    m_timerId = startTimer(200);
    mf_timerId=startTimer(150);
    AI_timerId=startTimer(10);
    f_timerId = startTimer(70);
    s_timerId = startTimer(300);
}
//! [6]

//! [7]
void AnalogClockWindow::timerEvent(QTimerEvent *event)
{
    if(isStart) return;

    if(choice==5)
    {
        if(xhead==990&&yhead==490)
           { yd=0;xd=-1;}
        else if(xhead==990&&yhead==480)
           { yd=1;xd=0;}
        else if(xhead==0&&yhead==0)
           { xd=1;yd=0;}
        else if(xhead%20&&yhead<480)
           { yd=1;xd=0;}
        else if(xhead%20&&yhead==480)
           { xd=1;yd=0;}
        else if(!(xhead%20)&&yhead==0)
           { yd=0;xd=1;}
        else if(!(xhead%20)&&yhead<=480)
           { yd=-1;xd=0;}
         else if(yhead==490&&xhead==0)
           { xd=0;yd=-1;}
        else if(yhead==490&&xhead>0)
           { xd=-1;yd=0;}
     }//AI蛇路径

    if(choice!=3&&(xhead<0||xhead>W||yhead<0||yhead>H)&&choice!=6)
        flag=false;
    else if(choice==3&&(xhead<0||xhead>W||yhead<0||yhead>H)&&(xhead1<0||xhead1>W||yhead1<0||yhead1>H))
        flag=false;
    //检查越界
    else if((xhead<0||xhead>W||yhead<0||yhead>H)&&choice==6)
    {
        if(xhead<0) xhead=W;
        else if(xhead>W) xhead=0;
        else if(yhead>H) yhead=0;
        else if(yhead<0) yhead=H;
    }//越界后穿越

    else if(choice==4)
    {
        if((xhead==200&&yhead<200)||(yhead==400&&xhead>4800))
            flag=false;
        for(int i=41;i<=45;i++)
            if(xhead==obstable[i].x&&yhead==obstable[i].y)
                flag=false;
    }//检查撞墙

    if((xhead+xd*10)==xfood&&(yhead+yd*10)==yfood&&choice!=3)
    {
        length++;
        for(int i=length-1;i>0;i--)
        {
            snake[i].x=snake[i-1].x;
            snake[i].y=snake[i-1].y;
        }
        xhead+=xd*10;
        yhead+=yd*10;
        snake[0].x=xhead;
        snake[0].y=yhead;
        get(xfood,yfood);
        ate=true;
    }//检查是否吃到食物以及吃到后蛇增长

    /*else if(choice==3&&xhead1==xfood&&yhead1==yfood)
    {
        length1++;
        for(int i=length1-1;i>0;i--)
        {
            snake1[i].x=snake1[i-1].x;
            snake1[i].y=snake1[i-1].y;
        }
        snake1[0].x=xhead1;
        snake1[0].y=yhead1;
        get(xfood,yfood);
    }*/

    else
    {
        if((xhead+xd*10)==xfood&&(yhead+yd*10)==yfood&&choice==3)
        {
            length++;
            for(int i=length-1;i>0;i--)
            {
                snake[i].x=snake[i-1].x;
                snake[i].y=snake[i-1].y;
            }
            xhead+=xd*10;
            yhead+=yd*10;
            snake[0].x=xhead;
            snake[0].y=yhead;
            get(xfood,yfood);
            ate=true;
        }
        else if(choice==3&&(xhead1+xd1*10)==xfood&&(yhead1+yd1*10)==yfood)
        {
                length1++;
                for(int i=length1-1;i>0;i--)
                {
                    snake1[i].x=snake1[i-1].x;
                    snake1[i].y=snake1[i-1].y;
                }
                xhead1+=xd1*10;
                yhead1+=yd1*10;
                snake1[0].x=xhead1;
                snake1[0].y=yhead1;
                get(xfood,yfood);
                ate1=true;
        }//双人模式下检查是否吃到食物以及吃到后蛇增长

        if(choice==2&&(xhead+xd*10)==xa&&(yhead+yd*10)==ya)
        {
           /* T-=10;
            if(T>50)
            get(xa,ya);
            else
            {xa=-1;ya=-1;
            if(xb==-1) get(xb,yb);}
            m_timerId = startTimer(T);*/
            get(xa,ya);
            if(ifs) ifs=false;
            else iff=true;
        }
        else if(choice==2&&(xhead+xd*10)==xb&&(yhead+yd*10)==yb)
        {
            /*T+=10;
            if(T<1000)
            get(xb,yb);
            else
            {xb=-1;yb=-1;
            if(xa==-1) get(xa,ya);}
            m_timerId = startTimer(T);//!*/
            get(xb,yb);
            if(iff) iff=false;
            else ifs=true;
        }//检查吃到特殊食物，及吃到后改变速度

        for(int i=4;i<length;i++)
        {
            if(xhead==snake[i].x&&yhead==snake[i].y)
            {flag=false; break;}
        }
        if(choice==3)
        {
            for(int i=4;i<length1;i++)
            {
                if(xhead1==snake1[i].x&&yhead1==snake1[i].y)
                {flag=false; break;}
            }
            for(int i=0;i<length;i++)
            {
                if(xhead1==snake[i].x&&yhead1==snake[i].y)
                {flag=false; break;}
            }
            for(int i=0;i<length1;i++)
            {
                if(xhead==snake1[i].x&&yhead==snake1[i].y)
                {flag=false; break;}
            }
        }//检查蛇与蛇或自己相撞

    if (choice!=5&&event->timerId() == m_timerId&&(!iff)&&(!ifs)&&length<=10&&length1<=10)
        {
        move();
        renderLater();
       }
    else if (choice!=5&&event->timerId() == mf_timerId&&(!iff)&&(!ifs)&&(length>10||length1>10))
        {
        move();
        renderLater();
       }
    else if(choice==5&&event->timerId() == AI_timerId)
        {
        move();
        renderLater();
        }
    else if(choice==2&&ifs&&event->timerId() == s_timerId)
       {
        move();
        renderLater();
       }
    else if(choice==2&&iff&&event->timerId() == f_timerId)
       {
        move();
        renderLater();
       }
    //不同速度的控制
     }
}
//! [7]

//! [1] //! [14]
void AnalogClockWindow::render(QPainter *p)
{
//! [14]
//! [8]

   if(isStart)
   {
       p->drawImage(QRect(0,0,1000,500),QImage(":/picture/start1.png"));
       return;
   }
    if(!flag)
   {
       p->drawImage(QRect(0,0,1000,500),QImage(":/picture/gameover.jpg"));
       return;
   }



       p->setBrush(Qt::blue);
       for(int i=0;i<length;i++)
       p->drawRect(QRect(snake[i].x,snake[i].y,10,10));

   if(choice==3)
   {
       p->setBrush(Qt::red);
       for(int i=0;i<length1;i++)
       p->drawRect(QRect(snake1[i].x,snake1[i].y,10,10));
   }//画蛇

   p->setBrush(Qt::green);
   p->drawRect(QRect(xfood,yfood,10,10));

   if(choice==2)
   {
       p->setBrush(Qt::red);
       p->drawRect(QRect(xa,ya,10,10));
       p->setBrush(Qt::yellow);
       p->drawRect(QRect(xb,yb,10,10));
   }
   //画食物
   if(choice==4)
   {
       p->setBrush(Qt::black);
       for(int i=1;i<=80;i++)
           p->drawRect(QRect(obstable[i].x,obstable[i].y,10,10));
   }//画障碍

}

int main(int argc, char **argv)
{
    QGuiApplication app(argc, argv);

    AnalogClockWindow clock;
    clock.show();

    return app.exec();
}
